on: [push, pull_request]

name: R-CMD-check

jobs:
  R-CMD-check:
    runs-on: ${{ matrix.config.os }}

    name: ${{ matrix.config.os }} (${{ matrix.config.r }} ${{ matrix.config.v8 }})

    strategy:
      fail-fast: false
      matrix:
        config:
        - { os: windows-latest, r: '3.6', args: "--no-manual"}
        - { os: macOS-latest, r: '3.6', args: "--no-manual"}
        - { os: macOS-latest, r: 'devel'}
        - { os: ubuntu-latest, r: '3.5', v8: "libnode-dev", args: "--no-manual"}
        - { os: ubuntu-latest, r: '3.6', v8: "libv8-dev", args: "--no-manual"}
        - { os: ubuntu-latest, r: '3.6', v8: "libnode-dev"}

    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      CRAN: ${{ matrix.config.cran }}

    steps:
      - uses: actions/checkout@v1

      - uses: r-lib/actions/setup-r@master
        with:
          r-version: ${{ matrix.config.r }}

      - uses: r-lib/actions/setup-pandoc@master

      - uses: r-lib/actions/setup-tinytex@master
        if: contains(matrix.config.args, 'no-manual') == false

      - name: Cache R packages
        uses: actions/cache@v1
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-r-${{ matrix.config.r }}-v8-${{ matrix.config.v8 }}-${{ hashFiles('DESCRIPTION') }}


      - name: install macOS system dependencies
        if: runner.os == 'macOS' && matrix.config.r == 'devel'
        continue-on-error: true
        run: |
          brew install pkg-config gdal openssl udunits v8 protobuf

      - name: add modern cran/v8 ppa
        # default libv8-dev on Xenial (16) and Bionic (18) is old libv8-3.14.5.
        # To test on new, add the cran/v8 ppa and install current libnode-dev,
        # To test on old, install libv8-dev from existing default ppa
        if: runner.os == 'Linux' && contains(matrix.config.v8, 'libnode-dev') == true
        run: |
          sudo add-apt-repository -y ppa:cran/v8
          sudo apt-get -y update

      - name: Install system dependencies
        if: runner.os == 'Linux'
        run: |
          sudo add-apt-repository -y ppa:ubuntugis/ubuntugis-unstable
          sudo add-apt-repository -y ppa:cran/jq
          sudo apt-get -y update
          sudo apt-get -y install libgdal-dev gdal-bin libgeos-dev \
          libgeos++-dev git-core pandoc pandoc-citeproc libproj-dev libjq-dev \
          libudunits2-dev libcurl4-openssl-dev libssl-dev libprotobuf-dev \
          protobuf-compiler libprotoc-dev valgrind libpq-dev netcdf-bin\
          ${{ matrix.config.v8 }}

      - name: Install dependencies
        run: Rscript -e "install.packages('remotes')" -e "remotes::install_deps(dependencies = TRUE)" -e "remotes::install_cran('rcmdcheck')"

      - name: Check
        run: Rscript -e "rcmdcheck::rcmdcheck(args = '${{ matrix.config.args }}', error_on = 'warning', check_dir = 'check')"

      - name: Upload check results
        if: failure()
        uses: actions/upload-artifact@master
        with:
          name: ${{ runner.os }}-r${{ matrix.config.r }}-results
          path: check

      - name: Test coverage
        if: matrix.config.os == 'macOS-latest' && matrix.config.r == '3.6'
        run: |
          Rscript -e 'remotes::install_github("r-lib/covr@gh-actions")'
          Rscript -e 'covr::codecov(token = "${{secrets.CODECOV_TOKEN}}")'
